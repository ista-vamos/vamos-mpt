#!/usr/bin/env python3

import argparse
import sys
from copy import copy
from os.path import abspath

from config import vamos_common_PYTHONPATH
sys.path.append(vamos_common_PYTHONPATH)

from codegen.codegen import CodeGenCpp
from parser.parser import Parser


def dbg(msg):
    print(f"\033[0;34m[dbg]: {msg}\033[0m", file=sys.stderr)

def main(args):
    ctx = None

    ### Parse the event source specification if given and generate the sources
    if args.sources_def:
        dbg("generating event sources")
        from config import vamos_sources_PYTHONPATH
        sys.path.append(vamos_sources_PYTHONPATH)
        from vamos_sources.spec.parser.parser import InlineSpecParser as SrcParser
        from vamos_sources.codegen.codegencpp import CodeGenCpp as SrcCodeGenCpp

        src_parser = SrcParser()
        src_ast, ctx = src_parser.parse_path(args.sources_def)
        src_args = copy(args)
        src_codegen = SrcCodeGenCpp(src_args, ctx)
        src_codegen.generate(src_ast)
        dbg("event sources generated")
        dbg(f"ctx: {ctx}")
        ctx.dump()

    ### Parse MPT
    dbg("generating MPT")
    parser = Parser(ctx)
    ast, base = parser.parse_path(args.input_mpt)
    mpt = base.mpt

    if args.sources_def:
        # this file will be generated later
        args.add_gen_files.append("src.cpp")
        args.add_gen_files.append("inputs.cpp")

    codegen = CodeGenCpp(args, out_dir_exists=True)
    codegen.generate(mpt)

    dbg("MPT generated")

    #mpt.todot()
    # print(ast.pretty())


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('inputs', nargs='+', help='Input files (.mpt, .vsrc, additional C++ files')
    parser.add_argument('--out-dir', action='store', default="/tmp/mpt", help='Output directory (default: /tmp/mpt)')
    parser.add_argument('--build-type', action='store', help='Force build _type for the CMake project')
    parser.add_argument('--debug', action='store_true', help='Debugging mode')
    parser.add_argument('--exit-on-error', action='store_true', help='Stop when a violation is found')
    parser.add_argument('--verbose', '-v', action='store_true', help='Print more messages')
    parser.add_argument('--stats', action='store_true', help='Gather statistics')
    parser.add_argument('-D', action='append', default=[], help='Additional CMake definitions')
    parser.add_argument('--reduction', action='append', default=[], choices=["symmetry", "reflexivity"],
                        help='Do not process pairs reflexive and symmetric pairs of  traces')
    parser.add_argument('--overwrite-default', action='append', default=[],
                        help="Do not generate the default version of the given file, its replacement is assumed to be "
                             "provided as an additional source.")
    args = parser.parse_args()

    args.input_mpt = None
    args.cpp_files = []
    args.add_gen_files = []
    args.sources_def = None
    args.cmake_defs = args.D
    for fl in args.inputs:
        if fl.endswith(".mpt"):
            if args.input_mpt:
                raise RuntimeError("Multiple .mpt files given")
            args.input_mpt = fl
        elif fl.endswith(".cpp") or fl.endswith(".h") or\
             fl.endswith(".hpp") or fl.endswith(".cxx") or fl.endswith("cc"):
            args.cpp_files.append(abspath(fl))
        elif fl.endswith(".vsrc"):
            if args.sources_def:
                raise RuntimeError("Multiple .vsrc files given")
            args.sources_def = fl

    print(args)

    return args

if __name__ == "__main__":
    args = parse_arguments()
    main(args)
